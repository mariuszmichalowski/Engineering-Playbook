"use strict";(self.webpackChunkengineering_playbook=self.webpackChunkengineering_playbook||[]).push([[4790],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return d}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),p=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},u=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},g=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),g=p(r),d=o,m=g["".concat(l,".").concat(d)]||g[d]||c[d]||i;return r?n.createElement(m,a(a({ref:t},u),{},{components:r})):n.createElement(m,a({ref:t},u))}));function d(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=g;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var p=2;p<i;p++)a[p]=r[p];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}g.displayName="MDXCreateElement"},5631:function(e,t,r){r.r(t),r.d(t,{assets:function(){return u},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return c}});var n=r(3117),o=r(102),i=(r(7294),r(3905)),a=["components"],s={},l="Git Repos",p={unversionedId:"developing/vcs/git-repos",id:"developing/vcs/git-repos",title:"Git Repos",description:"This page provides guidance on how to set up and manage your Git repos.",source:"@site/docs/developing/vcs/git-repos.md",sourceDirName:"developing/vcs",slug:"/developing/vcs/git-repos",permalink:"/docs/developing/vcs/git-repos",editUrl:"https://github.com/trussworks/Engineering-Playbook/edit/main/docs/developing/vcs/git-repos.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Source Control",permalink:"/docs/developing/vcs/"},next:{title:"Git Workflow",permalink:"/docs/developing/vcs/git-workflow"}},u={},c=[{value:"Setting Up Repositories",id:"setting-up-repositories",level:2},{value:"Repo Maintenance and Hygiene",id:"repo-maintenance-and-hygiene",level:2},{value:"GitHub Repo Settings",id:"github-repo-settings",level:2},{value:"Splitting Out Code to a New Repository",id:"splitting-out-code-to-a-new-repository",level:2}],g={toc:c};function d(e){var t=e.components,r=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,n.Z)({},g,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"git-repos"},"Git Repos"),(0,i.kt)("p",null,"This page provides guidance on how to set up and manage your Git repos.\nFor Truss, most of these will be kept in ",(0,i.kt)("a",{parentName:"p",href:"https://github.com"},"GitHub"),",\nso much of this advice will be geared specifically to managing GitHub\nrepositories."),(0,i.kt)("h2",{id:"setting-up-repositories"},"Setting Up Repositories"),(0,i.kt)("p",null,"We try to manage our Git repositories with ",(0,i.kt)("a",{parentName:"p",href:"https://terraform.io"},"Terraform"),"\nas much as possible. However, we haven't had great luck creating repos with\nTerraform, so what we do is create the repo manually in GitHub, then import\nit into Terraform. For an example of how we've done that, and what Terraform\ncode for GitHub repositories looks like, you can look in the\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/trussworks/legendary-waddle/tree/master/trussworks-prod/github-global"},"legendary-waddle repo"),"."),(0,i.kt)("h2",{id:"repo-maintenance-and-hygiene"},"Repo Maintenance and Hygiene"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Avoid including files in source control that are specific to your development\nmachine or process. For example, your editor or OS might generate files that are\nnot pertinent to your project. Since those types of files will need to be\n",(0,i.kt)("a",{parentName:"p",href:"https://help.github.com/en/github/using-git/ignoring-files"},"ignored")," from all\nthe repos you work on, it's more convenient to set them once in a global\n",(0,i.kt)("inlineCode",{parentName:"p"},".gitignore")," file (typically named ",(0,i.kt)("inlineCode",{parentName:"p"},"~/.gitignore_global"),"), as opposed to in each\nrepo's ",(0,i.kt)("inlineCode",{parentName:"p"},".gitignore"),". Once you create your file and add rules to it, you can tell\nGit to use it:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"git config --global core.excludesfile ~/.gitignore_global\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},'Delete local and remote feature branches after merging. This allows us to\nreuse branch names, and makes it easier for you to differentiate between\nyour branches that are done and those that are still being worked on. To turn\nthis on in GitHub, check the "Automatically delete head branches" box under\nthe "Merge button" heading in the Options settings for your repo. If you\'re\nmaintaining the repo with our\n',(0,i.kt)("a",{parentName:"p",href:"https://registry.terraform.io/modules/trussworks/repo/github"},"terraform-github-repo"),"\nmodule, it will turn this on automatically."))),(0,i.kt)("h2",{id:"github-repo-settings"},"GitHub Repo Settings"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"https://help.github.com/en/articles/configuring-protected-branches"},"Protect the default branch")," by turning on the following settings at a minimum:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Require pull request reviews before merging"),(0,i.kt)("li",{parentName:"ul"},"Require status checks to pass before merging"),(0,i.kt)("li",{parentName:"ul"},"Include administrators")),(0,i.kt)("p",{parentName:"li"},"If you're maintaining the repo with our ",(0,i.kt)("a",{parentName:"p",href:"https://registry.terraform.io/modules/trussworks/repo/github"},"terraform-github-repo"),"\nmodule, it will turn this on automatically."))),(0,i.kt)("h2",{id:"splitting-out-code-to-a-new-repository"},"Splitting Out Code to a New Repository"),(0,i.kt)("p",null,"If you need to split out code from one of your repositories into its own\nseparate repo, you can follow these steps to make sure you're preserving\nthe commit history when doing so."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"filter-branch")," subcommand to ",(0,i.kt)("inlineCode",{parentName:"p"},"git")," can be used to accomplish this, but the\n",(0,i.kt)("a",{parentName:"p",href:"https://git-scm.com/docs/git-filter-branch"},"documentation")," strongly\ndiscourages its use. Instead, a third-party utility called\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/newren/git-filter-repo"},"git-filter-repo")," is recommended."),(0,i.kt)("p",null,"First, create a new repo using the GitHub UI as you would normally."),(0,i.kt)("p",null,"In your terminal, clone a copy of the original repo into a new folder:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"git clone git@github.com:OWNER/REPONAME.git NEWREPO && cd NEWREPO\n")),(0,i.kt)("p",null,"Filter out commits that change the specified directory:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"git-filter-repo --subdirectory-filter DIRNAME\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"origin")," remote will be removed in this process. Add it back with the new\nrepo URL, and push the filtered work tree:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"git remote add origin git@github.com:OWNER/NEWREPO.git\ngit push --set-upstream origin <main>\n")),(0,i.kt)("p",null,"Note: This repo should be public and properly licensed. Truss has a\n\ud83d\udd12",(0,i.kt)("a",{parentName:"p",href:"https://docs.google.com/document/d/12UYIN3XfRPdKQV87_0ILa9-z6eWRBcLqtwP9fCyR6Tg/edit"},"decision record")," on what licenses should be applied to\nwhich sorts of projects."),(0,i.kt)("p",null,"If your project is managing its GitHub repositories with Terraform as\nwe suggest, make sure you add the repo to the Terraform code and import\nit from GitHub. Speak to your project's infrasec team if you need help\nwith this."))}d.isMDXComponent=!0}}]);