"use strict";(self.webpackChunkengineering_playbook=self.webpackChunkengineering_playbook||[]).push([[3997],{3905:function(e,t,o){o.d(t,{Zo:function(){return p},kt:function(){return d}});var r=o(7294);function n(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function i(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,r)}return o}function a(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?i(Object(o),!0).forEach((function(t){n(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):i(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function s(e,t){if(null==e)return{};var o,r,n=function(e,t){if(null==e)return{};var o,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)o=i[r],t.indexOf(o)>=0||(n[o]=e[o]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)o=i[r],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(n[o]=e[o])}return n}var l=r.createContext({}),c=function(e){var t=r.useContext(l),o=t;return e&&(o="function"==typeof e?e(t):a(a({},t),e)),o},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var o=e.components,n=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(o),d=n,g=m["".concat(l,".").concat(d)]||m[d]||u[d]||i;return o?r.createElement(g,a(a({ref:t},p),{},{components:o})):r.createElement(g,a({ref:t},p))}));function d(e,t){var o=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=o.length,a=new Array(i);a[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:n,a[1]=s;for(var c=2;c<i;c++)a[c]=o[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,o)}m.displayName="MDXCreateElement"},9405:function(e,t,o){o.r(t),o.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return u}});var r=o(3117),n=o(102),i=(o(7294),o(3905)),a=["components"],s={},l="[Source Control](/docs/developing/vcs/) / Tools",c={unversionedId:"developing/vcs/tools",id:"developing/vcs/tools",title:"[Source Control](./README.md) / Tools",description:"This page provides a summary of tools we commonly use for source control",source:"@site/docs/developing/vcs/tools.md",sourceDirName:"developing/vcs",slug:"/developing/vcs/tools",permalink:"/docs/developing/vcs/tools",editUrl:"https://github.com/trussworks/Engineering-Playbook/edit/main/docs/developing/vcs/tools.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"[Source Control](./README.md) / Master to Main branch rename",permalink:"/docs/developing/vcs/master-to-main"},next:{title:"[Engineering Playbook](../README.md) / Documentation",permalink:"/docs/documentation/"}},p={},u=[{value:"Git",id:"git",level:2},{value:"pre-commit",id:"pre-commit",level:2},{value:"pre-reqs",id:"pre-reqs",level:2}],m={toc:u};function d(e){var t=e.components,o=(0,n.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},m,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"source-control--tools"},(0,i.kt)("a",{parentName:"h1",href:"/docs/developing/vcs/"},"Source Control")," / Tools"),(0,i.kt)("p",null,"This page provides a summary of tools we commonly use for source control\nat Truss."),(0,i.kt)("h2",{id:"git"},"Git"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://git-scm.com/"},"Git")," is a free and open source distributed version\ncontrol system designed to handle everything from small to very large\nprojects with speed and efficiency."),(0,i.kt)("p",null,"Use your work email when making commits to our repositories.\nThe simplest path to correctness is setting global config:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'git config --global user.email "trussel@truss.works"\ngit config --global user.name "Trusty Trussel"\n')),(0,i.kt)("p",null,"If you drop the ",(0,i.kt)("inlineCode",{parentName:"p"},"--global")," flag,\nthese settings will only apply to the current repo.\nIf you ever re-clone that repo or clone another repo,\nyou will need to remember to set the local config again.\nYou won't.\nUse the global config. :-)"),(0,i.kt)("p",null,'For web-based Git operations,\nGitHub will use your primary email unless you choose\n"Keep my email address private".\nIf you don\'t want to set your work address as primary,\nplease ',(0,i.kt)("a",{parentName:"p",href:"https://github.com/settings/emails"},"turn on the privacy setting"),"."),(0,i.kt)("p",null,"Note that with 2-factor-authentication enabled,\nin order to push local code to GitHub through HTTPS,\nyou need to ",(0,i.kt)("a",{parentName:"p",href:"https://gist.github.com/ateucher/4634038875263d10fb4817e5ad3d332f"},"create a personal access token"),"\nand use that as your password."),(0,i.kt)("h2",{id:"pre-commit"},"pre-commit"),(0,i.kt)("p",null,"We use ",(0,i.kt)("a",{parentName:"p",href:"https://pre-commit.com/"},"pre-commit")," at Truss to easily add git\nhooks to our Git repos. This allows us to automate things like checking\nfor merge conflicts or mistakenly adding secret keys in our code. See\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/trussworks/circleci-docker-primary/blob/master/.pre-commit-config.yaml"},"this example"),"\npre-commit config file from one of our projects."),(0,i.kt)("p",null,"Since git does not distribute hooks when a repository is cloned, you will\nhave to install pre-commit in each cloned repo manually using ",(0,i.kt)("inlineCode",{parentName:"p"},"pre-commit install --install-hooks")," or pre-commit will not run in that repo.  To assist\nwith automating this step, pre-commit has a ",(0,i.kt)("a",{parentName:"p",href:"https://pre-commit.com/#pre-commit-init-templatedir"},"feature")," to exploit the\n",(0,i.kt)("a",{parentName:"p",href:"https://git-scm.com/docs/git-init#_template_directory"},"template directory")," setting in git:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-console"},"git config --global init.templateDir ~/.git-template\npre-commit init-templatedir ~/.git-template\n")),(0,i.kt)("p",null,"From now on, each new repository you create or clone will have pre-commit\ninstalled automatically."),(0,i.kt)("h2",{id:"pre-reqs"},"pre-reqs"),(0,i.kt)("p",null,"We use ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/trussworks/prereqs"},"pre-reqs")," to bootstrap\nsystem pre-requisites that are required to run the code we push to Github."))}d.isMDXComponent=!0}}]);