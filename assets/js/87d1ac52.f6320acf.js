"use strict";(self.webpackChunkengineering_playbook=self.webpackChunkengineering_playbook||[]).push([[7232],{3905:function(e,n,t){t.d(n,{Zo:function(){return d},kt:function(){return m}});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var u=a.createContext({}),c=function(e){var n=a.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=c(e.components);return a.createElement(u.Provider,{value:n},e.children)},l={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,u=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=c(t),m=r,g=p["".concat(u,".").concat(m)]||p[m]||l[m]||o;return t?a.createElement(g,i(i({ref:n},d),{},{components:t})):a.createElement(g,i({ref:n},d))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=p;var s={};for(var u in n)hasOwnProperty.call(n,u)&&(s[u]=n[u]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=t[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},3310:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return u},metadata:function(){return c},assets:function(){return d},toc:function(){return l},default:function(){return m}});var a=t(7462),r=t(3366),o=(t(7294),t(3905)),i=["components"],s={},u="[AWS](/Engineering-Playbook/docs/infrasec/aws/) / GuardDuty for Organizations",c={unversionedId:"infrasec/aws/guardduty",id:"infrasec/aws/guardduty",title:"[AWS](README.md) / GuardDuty for Organizations",description:"GuardDuty is an anomaly detection",source:"@site/docs/infrasec/aws/guardduty.md",sourceDirName:"infrasec/aws",slug:"/infrasec/aws/guardduty",permalink:"/Engineering-Playbook/docs/infrasec/aws/guardduty",editUrl:"https://github.com/trussworks/Engineering-Playbook/edit/main/docs/infrasec/aws/guardduty.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"[GovCloud](README.md) / Setting Up a GovCloud Organization",permalink:"/Engineering-Playbook/docs/infrasec/aws/govcloud/gov-orgs"},next:{title:"[AWS](README.md) / Naming",permalink:"/Engineering-Playbook/docs/infrasec/aws/naming"}},d={},l=[{value:"Initial configuration",id:"initial-configuration",level:2},{value:"Adding GuardDuty to existing accounts",id:"adding-guardduty-to-existing-accounts",level:2},{value:"Adding more regions",id:"adding-more-regions",level:2}],p={toc:l};function m(e){var n=e.components,t=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"aws--guardduty-for-organizations"},(0,o.kt)("a",{parentName:"h1",href:"/Engineering-Playbook/docs/infrasec/aws/"},"AWS")," / GuardDuty for Organizations"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://aws.amazon.com/guardduty/"},"GuardDuty")," is an anomaly detection\nsystem that can alert you via SNS when it detects unusual activity within\nyour AWS accounts, such as someone using it from an unusual IP."),(0,o.kt)("p",null,"Setting up GuardDuty through an organization can be done with a relatively\nsmall amount of Terraform, but there are some issues you may run into as\nyou do so. This document is intended to help you get GuardDuty set up in\nyour organization and work around these pitfalls."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#initial-configuration"},"Initial configuration")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#adding-guardduty-to-existing-accounts"},"Adding GuardDuty to existing accounts")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#adding-more-regions"},"Adding more regions"))),(0,o.kt)("h2",{id:"initial-configuration"},"Initial configuration"),(0,o.kt)("p",null,"To get GuardDuty set up within your organization, the first task will be\nto make some changes in your ",(0,o.kt)("inlineCode",{parentName:"p"},"org-root")," account to get it started. First,\nyou will need to make sure that GuardDuty is set up as a service principal\nfor your AWS organization like so:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-hcl"},'resource "aws_organizations_organization" "main" {\n  enabled_policy_types = ["SERVICE_CONTROL_POLICY"]\n  feature_set          = "ALL"\n  aws_service_access_principals = [\n    "config.amazonaws.com",\n    "cloudtrail.amazonaws.com",\n    "guardduty.amazonaws.com" # Make sure this is present\n  ]\n}\n')),(0,o.kt)("p",null,'Using GuardDuty via organizations means that you can consolidate all your\nfindings in one account, known as the "GuardDuty admin account". AWS best\npractice is to ',(0,o.kt)("em",{parentName:"p"},"not")," have this in your ",(0,o.kt)("inlineCode",{parentName:"p"},"org-root")," account (because we want\nto use that account for as little as possible). As a result, you will want\nto set your admin account to be another account, usually the ",(0,o.kt)("inlineCode",{parentName:"p"},"infra"),"\naccount. The code below will make the ",(0,o.kt)("inlineCode",{parentName:"p"},"spacecats-infra")," account the\nGuardDuty admin account for our organization:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-hcl"},'resource "aws_guardduty_organization_admin_account" "main" {\n  depends_on = [aws_organizations_organization.main]\n\n  admin_account_id = aws_organizations_account.spacecats_infra.id\n}\n')),(0,o.kt)("p",null,"Once we've done that, we can then go over to the ",(0,o.kt)("inlineCode",{parentName:"p"},"spacecats-infra"),"\naccount and configure GuardDuty there. There are two components you'll\nneed to set it up: a GuardDuty detector (which is the basic component\nfor GuardDuty that generates your findings), and a GuardDuty organization\nconfiguration. The code for these looks like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-hcl"},'resource "aws_guardduty_detector" "main" {\n  enable = true\n}\n\nresource "aws_guardduty_organization_configuration" "main" {\n  auto_enable = true\n  detector_id = aws_guardduty_detector.main.id\n}\n')),(0,o.kt)("p",null,"Once you've created this, GuardDuty is set up and ready to go for the\norganization. New accounts added the the organization after this point\nwill automatically have a detector created that is connected to the\ndetector in the GuardDuty admin account. Accounts that already exist\nwill not have GuardDuty set up in them yet, however."),(0,o.kt)("h2",{id:"adding-guardduty-to-existing-accounts"},"Adding GuardDuty to existing accounts"),(0,o.kt)("p",null,"To add an account to an organization's GuardDuty configuration, in the\nGuardDuty admin account, you'll need to add an ",(0,o.kt)("inlineCode",{parentName:"p"},"aws_guardduty_member"),"\nresource for the account. The code for that looks like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-hcl"},'locals {\n  spacecats_sandbox_id    = "123456789000"\n  spacecats_sandbox_email = "aws+spacecats-sandbox@example.com"\n}\n\nresource "aws_guardduty_member" "spacecats_sandbox" {\n  account_id                 = local.spacecats_sandbox_id\n  detector_id                = aws_guardduty_detector.main.id\n  email                      = local.spacecats_sandbox_email\n  invite                     = false\n  disable_email_notification = true\n}\n')),(0,o.kt)("p",null,"Unfortunately, due to a ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/terraform-providers/terraform-provider-aws/issues/13906"},"bug"),",\nonce you apply this to fix it, subsequent runs will try to destroy and\nrecreate this resource. However, if we comment out this resource and\napply, despite Terraform claiming the resource was destroyed, the\nmembership will still be there. You can confirm this using these\ncommands:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},'$ aws guardduty list-detectors\n{\n    "DetectorIds": [\n        "1234567890abcdef0000000000000000"\n    ]\n}\n\n$ aws guardduty list-members --detector-id 1234567890abcdef0000000000000000\n{\n    "Members": [\n        {\n            "AccountId": "123456789000",\n            "DetectorId": "deadbeef627C78CEBDeE47FAC9CdA7Cd",\n            "MasterId": "000987654321",\n            "RelationshipStatus": "Enabled",\n            "UpdatedAt": "2020-06-23T14:31:35.220Z"\n        },\n\n...\n')),(0,o.kt)("p",null,"You will still see the detector for the account you added in this list of\nmembers, even though Terraform will claim to have destroyed it."),(0,o.kt)("h2",{id:"adding-more-regions"},"Adding more regions"),(0,o.kt)("p",null,"GuardDuty is a regional service -- creating the detectors and members as\nabove will only enable GuardDuty in a single region. Our best practice\nuses SCPs to prevent AWS actions in regions we're not using, so you don't\nneed to turn on GuardDuty in say, ",(0,o.kt)("inlineCode",{parentName:"p"},"eu-central-1")," probably, but at the very\nleast, most commercial organizations will be using ",(0,o.kt)("inlineCode",{parentName:"p"},"us-west-2")," and\n",(0,o.kt)("inlineCode",{parentName:"p"},"us-east-1"),", simply because some resources (like Route53) can only work in\n",(0,o.kt)("inlineCode",{parentName:"p"},"us-east-1"),". So at the very least, you'll want to have GuardDuty set up in\nboth of those."),(0,o.kt)("p",null,"If we assume we've set up our original infrastructure in ",(0,o.kt)("inlineCode",{parentName:"p"},"us-west-2"),", we\nwant to set up GuardDuty for ",(0,o.kt)("inlineCode",{parentName:"p"},"us-east-1")," as well. To do this, we need to\nadd duplicate resources to the GuardDuty admin account."),(0,o.kt)("p",null,"To start off, we'll need to define a second provider for the other region\nin our ",(0,o.kt)("inlineCode",{parentName:"p"},"providers.tf")," file (this may already be done if the account already\nhas resources in the ",(0,o.kt)("inlineCode",{parentName:"p"},"us-east-1")," region:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-hcl"},'provider "aws" {\n  version = "~> 2.67"\n  alias   = "us-east-1"\n  region  = "us-east-1"\n}\n')),(0,o.kt)("p",null,"Then we will need to define a new GuardDuty detector and organization\nGuardDuty configuration for the new region like so:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-hcl"},'resource "aws_guardduty_detector" "main_useast1" {\n  provider = aws.us-east-1\n\n  enable = true\n}\n\nresource "aws_guardduty_organization_configuration" "main_useast1" {\n  provider    = aws.us-east-1\n  auto_enable = true\n  detector_id = aws_guardduty_detector.main_useast1.id\n}\n')),(0,o.kt)("p",null,"As with the originals, this should take care of any new accounts;\nany accounts that already exist that need to be connected to this\ndetector, however, will need to be created according to the same method\ndescribed in the previous section, with the addition of the ",(0,o.kt)("inlineCode",{parentName:"p"},"provider"),"\nargument and pointing to the new detector, like so:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-hcl"},'resource "aws_guardduty_member" "spacecats_sandbox_useast1" {\n  provider                   = aws.us-east-1\n  account_id                 = local.spacecats_sandbox_id\n  detector_id                = aws_guardduty_detector.main_useast1.id\n  email                      = local.spacecats_sandbox_email\n  invite                     = false\n  disable_email_notification = true\n}\n')))}m.isMDXComponent=!0}}]);