"use strict";(self.webpackChunkengineering_playbook=self.webpackChunkengineering_playbook||[]).push([[3084],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return f}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u=r.createContext({}),c=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=c(e.components);return r.createElement(u.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},s=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,u=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),s=c(n),f=o,m=s["".concat(u,".").concat(f)]||s[f]||d[f]||a;return n?r.createElement(m,i(i({ref:t},l),{},{components:n})):r.createElement(m,i({ref:t},l))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=s;var p={};for(var u in t)hasOwnProperty.call(t,u)&&(p[u]=t[u]);p.originalType=e,p.mdxType="string"==typeof e?e:o,i[1]=p;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}s.displayName="MDXCreateElement"},7170:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return p},contentTitle:function(){return u},metadata:function(){return c},assets:function(){return l},toc:function(){return d},default:function(){return f}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),i=["components"],p={},u="[CI/CD](/docs/developing/cicd/) / Dependabot",c={unversionedId:"developing/cicd/dependabot",id:"developing/cicd/dependabot",title:"[CI/CD](README.md) / Dependabot",description:"Dependabot is a tool to automatically find updates to dependencies in our repos.",source:"@site/docs/developing/cicd/dependabot.md",sourceDirName:"developing/cicd",slug:"/developing/cicd/dependabot",permalink:"/docs/developing/cicd/dependabot",editUrl:"https://github.com/trussworks/Engineering-Playbook/edit/main/docs/developing/cicd/dependabot.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"[CI/CD](README.md) / Standard Delivery Pipeline",permalink:"/docs/developing/cicd/delivery-pipeline"},next:{title:"[CI/CD](README.md) / Intro to CI/CD",permalink:"/docs/developing/cicd/intro"}},l={},d=[{value:"Configuration",id:"configuration",level:2},{value:"Auto Approve",id:"auto-approve",level:3}],s={toc:d};function f(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"cicd--dependabot"},(0,a.kt)("a",{parentName:"h1",href:"/docs/developing/cicd/"},"CI/CD")," / Dependabot"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://dependabot.com/"},"Dependabot")," is a tool to automatically find updates to dependencies in our repos."),(0,a.kt)("h2",{id:"configuration"},"Configuration"),(0,a.kt)("p",null,"The Dependabot website has configuration for when/how often to run checks and configuration variables but you'll configure each repo in a file ",(0,a.kt)("inlineCode",{parentName:"p"},".dependabot/config.yml"),"."),(0,a.kt)("p",null,"Example from ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/trussworks/terraform-aws-alb-web-containers"},"Terraform AWS Alb Web Containers")," module:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yml"},'version: 1\nupdate_configs:\n  # Keep go modules up to date, batching pull requests weekly\n  - package_manager: "go:modules"\n    directory: "/"\n    update_schedule: "weekly"\n    # Apply default reviewer @trussworks/waddlers group to PRs\n    default_reviewers:\n      - "trussworks/waddlers"\n    # Apply dependencies label to PRs\n    default_labels:\n      - "dependencies"\n    automerged_updates:\n      - match:\n          dependency_type: "all"\n          update_type: "all"\n\n')),(0,a.kt)("p",null,"Dependabot can be configured to auto merge updates but respects branch protections. So, if you have automated tests, it should be stopped by a failure or if the branch requires a review from an owner."),(0,a.kt)("h3",{id:"auto-approve"},"Auto Approve"),(0,a.kt)("p",null,"If you decide that your repo can automatically merge any of these changes without a human approving or looking at them you can configure ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/features/actions"},"Github Actions")," to evaluate and auto approve these changes from Dependabot."),(0,a.kt)("p",null,"Note: We tried ",(0,a.kt)("a",{parentName:"p",href:"https://mergify.io/"},"mergify")," and found that it could not work around the branch protections that we strongly suggest."),(0,a.kt)("p",null,"We suggest using ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/hmarr/auto-approve-action"},"Auto-approve action")," in a file ",(0,a.kt)("inlineCode",{parentName:"p"},".github/workflows/auto-approve.yml"),"."),(0,a.kt)("p",null,"You do not need to set the ",(0,a.kt)("inlineCode",{parentName:"p"},"GITHUB_TOKEN")," as Github's bot should be able to run this for you."),(0,a.kt)("p",null,"Example configuration from ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/trussworks/terraform-aws-alb-web-containers"},"Terraform AWS Alb Web Containers"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yml"},"name: Auto approve\n\non:\n  pull_request\n\njobs:\n  auto-approve:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: hmarr/auto-approve-action@v2.0.0\n      if: github.actor == 'dependabot[bot]' || github.actor == 'dependabot-preview[bot]'\n      with:\n        github-token: \"${{ secrets.GITHUB_TOKEN }}\"\n")))}f.isMDXComponent=!0}}]);